<?php
/**
 * TransactionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CMGroep\Idin
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iDIN API
 *
 * CMGroep iDIN API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CMGroep\Idin\Models;

use \ArrayAccess;

/**
 * TransactionRequest Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     CMGroep\Idin
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TransactionRequest extends BaseRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'issuer_id' => 'string',
        'entrance_code' => 'string',
        'merchant_return_url' => 'string',
        'language' => 'string',
        'identity' => 'bool',
        'name' => 'bool',
        'address' => 'bool',
        'date_of_birth' => 'bool',
        '_18y_or_older' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'issuer_id' => 'issuer_id',
        'entrance_code' => 'entrance_code',
        'merchant_return_url' => 'merchant_return_url',
        'language' => 'language',
        'identity' => 'identity',
        'name' => 'name',
        'address' => 'address',
        'date_of_birth' => 'date_of_birth',
        '_18y_or_older' => '18y_or_older'
    );

    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'issuer_id' => 'setIssuerId',
        'entrance_code' => 'setEntranceCode',
        'merchant_return_url' => 'setMerchantReturnUrl',
        'language' => 'setLanguage',
        'identity' => 'setIdentity',
        'name' => 'setName',
        'address' => 'setAddress',
        'date_of_birth' => 'setDateOfBirth',
        '_18y_or_older' => 'set18yOrOlder'
    );

    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'issuer_id' => 'getIssuerId',
        'entrance_code' => 'getEntranceCode',
        'merchant_return_url' => 'getMerchantReturnUrl',
        'language' => 'getLanguage',
        'identity' => 'getIdentity',
        'name' => 'getName',
        'address' => 'getAddress',
        'date_of_birth' => 'getDateOfBirth',
        '_18y_or_older' => 'get18yOrOlder'
    );

    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['issuer_id'] = isset($data['issuer_id']) ? $data['issuer_id'] : null;
        $this->container['entrance_code'] = isset($data['entrance_code']) ? $data['entrance_code'] : null;
        $this->container['merchant_return_url'] = isset($data['merchant_return_url']) ? $data['merchant_return_url'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['identity'] = isset($data['identity']) ? $data['identity'] : false;
        $this->container['name'] = isset($data['name']) ? $data['name'] : false;
        $this->container['address'] = isset($data['address']) ? $data['address'] : false;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : false;
        $this->container['_18y_or_older'] = isset($data['_18y_or_older']) ? $data['_18y_or_older'] : false;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['issuer_id'] === null) {
            $invalid_properties[] = "'issuer_id' can't be null";
        }
        if ($this->container['entrance_code'] === null) {
            $invalid_properties[] = "'entrance_code' can't be null";
        }
        if ($this->container['merchant_return_url'] === null) {
            $invalid_properties[] = "'merchant_return_url' can't be null";
        }
        if ($this->container['identity'] === null) {
            $invalid_properties[] = "'identity' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalid_properties[] = "'address' can't be null";
        }
        if ($this->container['date_of_birth'] === null) {
            $invalid_properties[] = "'date_of_birth' can't be null";
        }
        if ($this->container['_18y_or_older'] === null) {
            $invalid_properties[] = "'_18y_or_older' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['issuer_id'] === null) {
            return false;
        }
        if ($this->container['entrance_code'] === null) {
            return false;
        }
        if ($this->container['merchant_return_url'] === null) {
            return false;
        }
        if ($this->container['identity'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['address'] === null) {
            return false;
        }
        if ($this->container['date_of_birth'] === null) {
            return false;
        }
        if ($this->container['_18y_or_older'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets issuer_id
     * @return string
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     * @param string $issuer_id The ID of the issuer chosen by the end-user
     * @return $this
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets entrance_code
     * @return string
     */
    public function getEntranceCode()
    {
        return $this->container['entrance_code'];
    }

    /**
     * Sets entrance_code
     * @param string $entrance_code This is a token that will allow you to rejoin the user to his session when he returns. It can be a maximum of 40 characters and should only contain the characters a-z, A-Z and 0-9
     * @return $this
     */
    public function setEntranceCode($entrance_code)
    {
        $this->container['entrance_code'] = $entrance_code;

        return $this;
    }

    /**
     * Gets merchant_return_url
     * @return string
     */
    public function getMerchantReturnUrl()
    {
        return $this->container['merchant_return_url'];
    }

    /**
     * Sets merchant_return_url
     * @param string $merchant_return_url The place where the bank should redirect the user to at the end of the flow. The bank will append two query parameters to this url when returning the user to you, trxid and ec. The latter will contain the value of entrance_code, trxid is the transaction_id that you will receive in this request.
     * @return $this
     */
    public function setMerchantReturnUrl($merchant_return_url)
    {
        $this->container['merchant_return_url'] = $merchant_return_url;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Currently only nl and en. This is the preferred language the bank will use to communicate with your user.
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets identity
     * @return bool
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     * @param bool $identity To retrieve a uniquely identifying token with the bank
     * @return $this
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets name
     * @return bool
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param bool $name To retrieve name information
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     * @return bool
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param bool $address To retrieve address information
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets date_of_birth
     * @return bool
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     * @param bool $date_of_birth The birthdate of the user
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets _18y_or_older
     * @return bool
     */
    public function get18yOrOlder()
    {
        return $this->container['_18y_or_older'];
    }

    /**
     * Sets _18y_or_older
     * @param bool $_18y_or_older Is the user 18 year or older
     * @return $this
     */
    public function set18yOrOlder($_18y_or_older)
    {
        $this->container['_18y_or_older'] = $_18y_or_older;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CMGroep\Idin\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CMGroep\Idin\ObjectSerializer::sanitizeForSerialization($this));
    }
}


