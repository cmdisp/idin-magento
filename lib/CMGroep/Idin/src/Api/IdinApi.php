<?php
/**
 * IdinApi
 * PHP version 5
 *
 * @category Class
 * @package  CMGroep\Idin
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iDIN API
 *
 * CMGroep iDIN API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CMGroep\Idin\Api;

use \CMGroep\Idin\Configuration;
use \CMGroep\Idin\ApiClient;
use \CMGroep\Idin\ApiException;
use \CMGroep\Idin\ObjectSerializer;

/**
 * IdinApi Class Doc Comment
 *
 * @category Class
 * @package  CMGroep\Idin
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IdinApi
{

    /**
     * API Client
     *
     * @var \CMGroep\Idin\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CMGroep\Idin\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CMGroep\Idin\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://idin-staging.cmhosting.nl/prod/idin/v1.0');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CMGroep\Idin\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CMGroep\Idin\ApiClient $apiClient set the API client
     *
     * @return IdinApi
     */
    public function setApiClient(\CMGroep\Idin\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation directoryPost
     *
     * Retrieve issuer directory
     *
     * @param \CMGroep\Idin\Models\DirectoryRequest $merchant_token  (optional)
     * @return \CMGroep\Idin\Models\DirectoryResponse[]
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function directoryPost($merchant_token = null)
    {
        list($response) = $this->directoryPostWithHttpInfo($merchant_token);
        return $response;
    }

    /**
     * Operation directoryPostWithHttpInfo
     *
     * Retrieve issuer directory
     *
     * @param \CMGroep\Idin\Models\DirectoryRequest $merchant_token  (optional)
     * @return Array of \CMGroep\Idin\Models\DirectoryResponse[], HTTP status code, HTTP response headers (array of strings)
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function directoryPostWithHttpInfo($merchant_token = null)
    {
        // parse inputs
        $resourcePath = "/directory";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_token)) {
            $_tempBody = $merchant_token;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CMGroep\Idin\Models\DirectoryResponse[]',
                '/directory'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\CMGroep\Idin\Models\DirectoryResponse[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\DirectoryResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation merchantsMerchantTokenGet
     *
     * Retrieve merchant details
     *
     * @param string $merchant_token Merchant Token (required)
     * @return \CMGroep\Idin\Models\MerchantResponse
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function merchantsMerchantTokenGet($merchant_token)
    {
        list($response) = $this->merchantsMerchantTokenGetWithHttpInfo($merchant_token);
        return $response;
    }

    /**
     * Operation merchantsMerchantTokenGetWithHttpInfo
     *
     * Retrieve merchant details
     *
     * @param string $merchant_token Merchant Token (required)
     * @return Array of \CMGroep\Idin\Models\MerchantResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function merchantsMerchantTokenGetWithHttpInfo($merchant_token)
    {
        // verify the required parameter 'merchant_token' is set
        if ($merchant_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_token when calling merchantsMerchantTokenGet');
        }
        // parse inputs
        $resourcePath = "/merchants/{merchant_token}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($merchant_token !== null) {
            $resourcePath = str_replace(
                "{" . "merchant_token" . "}",
                $this->apiClient->getSerializer()->toPathValue($merchant_token),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CMGroep\Idin\Models\MerchantResponse',
                '/merchants/{merchant_token}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\CMGroep\Idin\Models\MerchantResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\MerchantResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation statusPost
     *
     * Retrieve the status of a transaction
     *
     * @param \CMGroep\Idin\Models\StatusRequest $merchant_token  (optional)
     * @return \CMGroep\Idin\Models\StatusResponse
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function statusPost($merchant_token = null)
    {
        list($response) = $this->statusPostWithHttpInfo($merchant_token);
        return $response;
    }

    /**
     * Operation statusPostWithHttpInfo
     *
     * Retrieve the status of a transaction
     *
     * @param \CMGroep\Idin\Models\StatusRequest $merchant_token  (optional)
     * @return Array of \CMGroep\Idin\Models\StatusResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function statusPostWithHttpInfo($merchant_token = null)
    {
        // parse inputs
        $resourcePath = "/status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_token)) {
            $_tempBody = $merchant_token;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CMGroep\Idin\Models\StatusResponse',
                '/status'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\CMGroep\Idin\Models\StatusResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\StatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation transactionPost
     *
     * Start a new iDIN transaction
     *
     * @param \CMGroep\Idin\Models\TransactionRequest $merchant_token  (optional)
     * @return \CMGroep\Idin\Models\TransactionResponse
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function transactionPost($merchant_token = null)
    {
        list($response) = $this->transactionPostWithHttpInfo($merchant_token);
        return $response;
    }

    /**
     * Operation transactionPostWithHttpInfo
     *
     * Start a new iDIN transaction
     *
     * @param \CMGroep\Idin\Models\TransactionRequest $merchant_token  (optional)
     * @return Array of \CMGroep\Idin\Models\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \CMGroep\Idin\ApiException on non-2xx response
     */
    public function transactionPostWithHttpInfo($merchant_token = null)
    {
        // parse inputs
        $resourcePath = "/transaction";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_token)) {
            $_tempBody = $merchant_token;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CMGroep\Idin\Models\TransactionResponse',
                '/transaction'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\CMGroep\Idin\Models\TransactionResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\TransactionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CMGroep\Idin\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
